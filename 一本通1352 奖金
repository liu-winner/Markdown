# 一本通1352 奖金
## 原题链接
<http://ybt.ssoier.cn:8088/problem_show.php?pid=1352>
## 题解
这题看到```我认为员工a的奖金应该比b高！```发现和拓扑排序有关系，因为拓扑排序就是处理两点关系的算法。而这题要你求总工资数的最小值，所以是有一些的动态规划。

1. 存图方式：由于$n\leq 10000$用邻接矩阵会$\operatorname{MLE}$所以我们用链式前向星或者vector来存图，这里用vector来存储。（如果不会存图模板的[戳这里](https://www.luogu.com.cn/blog/lza/tu-di-cun-chu)）

2. 建图方式：由于```我认为员工a的奖金应该比b高！```这句话，说明a的工资至少为b的工资加1，而工资只有上限，没有下限，所以我们将a加入b的邻接表，a的入度加1。

3. 我们定义一个$pay$数组，$pay[i]$表示员工$i$工资至少的钱数。那么状态就是工资数，状态转移方程为：$pay[i\to to]=\max(pay[i]+1,pay[i\to to])(i\to to\text{是}i\text{的邻接表的任意一个成员})$。这样我们就将求解部分做完了。

4. 如何判断无解？因为拓扑排序是要求**有向无环图**这里肯定是有方向的，所以只有有**环**的的情况是无解的。那么怎么判断是否有环呢？我们可以用并查集判环，SPFA或者Bellman-Ford来判环。(~~虽然SPFA死了~~)但这题是特殊的**有向图**那么我们可以用拓扑排序来判环。

5. 怎么用拓扑排序判断是否有环呢？我们定义一个计数器cnt，初始值为0，拓扑排序时，每弹一次队列，cnt就加1，等最后cnt等于n是就说明没有环，cnt不等于n时，就是cnt<n的时候就有环。

## 代码
```cpp
#include<bits/stdc++.h>
using namespace std;
const int N = 1e4 + 5;

vector<int> G[N];//定义邻接表
int in[N];//入度数组
int pay[N];//相当于dp数组

int ans;

int n, m;
int father, son;

void init (int *a, int num) {
	for (int i = 1; i <= n; ++i) a[i] = num;
	return ;
} 

void topo() {
	int cnt = 0;//定义计数器
	queue<int> worker;
	for (int i = 1; i <= n; ++i) {//拓扑排序初始化操作
		if (in[i] == 0) worker.push(i);
	}
	while (!worker.empty()) {
		int now = worker.front();
		worker.pop();
		++cnt;//计数器加1
		for (vector<int> :: iterator it = G[now].begin(); it != G[now].end(); ++it) {//遍历now的邻接表
			int id = *it;
			if (--in[id] == 0) worker.push(id);//如果此时去掉now之后入度为0，就加入队列
			pay[id] = max(pay[id], pay[now] + 1);//状态转移
		}	
	}
	if (cnt != n) puts("Poor Xed"), exit(0);//只要cnt不等于n，就输出"Poor Xed"，然后直接return 0;
	return ;
}

int main() {
	scanf("%d%d", &n, &m);
	init(pay, 100);//我们初始化pay数组为100
	for (int i = 1; i <= m; ++i) {
		scanf("%d%d", &father, &son);
		G[son].push_back(father);//加入邻接表
		++in[father];//入度加1
	}
	topo();//拓扑排序
	for (int i = 1; i <= n; ++i) ans += pay[i];//如果有解，取pay数组之和
	printf("%d\n", ans);
	return 0;
}

```

码字不易，给个赞再走吧。
